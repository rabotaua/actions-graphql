name: graphql-check

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "repository, e.g.: rabotaua/my-awesome-app"
        required: true
        default: "rabotaua/"
      commit:
        description: "commit hash or branch name, default: main, sha can be full or short"
        required: true
        default: "main"

run-name: ${{ inputs.repository }}

permissions:
  contents: read
  pull-requests: read
  id-token: write
  packages: write

jobs:
  federated-service-check:
    runs-on: ubuntu-latest
    steps:
      - name: get sha for '${{ inputs.repository }}@${{ inputs.commit }}'
        id: sha
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          result=$(curl -s "https://api.github.com/repos/${{ inputs.repository }}/commits/${{ inputs.commit }}" -H "Authorization: Bearer $GITHUB_TOKEN" | jq -r ".sha")
          echo "result=$result" >> $GITHUB_OUTPUT
          echo $result

      - run: echo $FOO
        env:
          FOO: ${{steps.sha.outputs.result}}

      # - uses: actions/checkout@v4
      #   with:
      #     repository: ${{ inputs.repository }}
      #     ref: ${{steps.sha.outputs.result}}
      #     token: ${{ secrets.GH_TOKEN }}

      # - name: federated service check
      #   shell: pswh
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #     OCTOPUS_TOKEN: ${{ secrets.OCTOPUS_CLI_API_KEY }}
      #   run: |
      #     $repo = "${{ inputs.repository }}"
      #     if ($repo -eq "rabotaua/") {
      #       Write-Host "Repository is required"
      #       exit 1
      #     }
      #     $githubHeaders = @{Authorization = "Bearer $($env:GITHUB_TOKEN)"}
      #     $octopusHeaders = @{ "X-Octopus-ApiKey" = $env:OCTOPUS_TOKEN; "Content-Type" = "application/json" }

      #     $repo_name = 'vacancy-api'

      #     $readme_file_url = "https://api.github.com/repos/rabotaua/$($repo_name)/contents/README.md"
      #     $readme_file_file = Invoke-RestMethod $readme_file_url -Headers $githubHeaders -MaximumRetryCount 3 -RetryIntervalSec 1
      #     $readme_file_decoded_content = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($readme_file_file.content))

      #     if($readme_file_decoded_content -match 'https://robota.octopus.app/app#/Spaces-1/projects/([A-z-]*)' -eq $false){
      #         Write-Host "Octopus url not found"
      #     }

      #     $octopus_project_name = $Matches[1]
      #     Write-Host "Octopus project name '$octopus_project_name'"

      #     $projects = Invoke-RestMethod "https://robota.octopus.app/api/projects/all" -Headers $octopusHeaders
      #     $project = $projects | Where-Object Name -eq $octopus_project_name | Select-Object -First 1

      #     $variables = Invoke-RestMethod -Uri "https://robota.octopus.app$($project.Links.Variables)" -Headers $octopusHeaders

      #     $ServiceName = $variables.Variables | Where-Object Name -eq "ServiceName" | Select-Object -ExpandProperty Value -First 1
      #     if (-not $ServiceName) {
      #         $ServiceName = $variables.Variables | Where-Object Name -eq "ApolloGraphServiceName" | Select-Object -ExpandProperty Value -First 1
      #     }
      #     Write-Host "Service subgraph name '$ServiceName'"

      # - name: docker build
      #   working-directory: Api/
      #   run: dotnet publish --os linux --arch x64 -c Release -p:PublishProfile=DefaultContainer -p:ContainerImageTag=latest -p:ContainerRepository=seeker-notifications-api

      # - name: docker run
      #   run: docker run -d --name=service -p 5000:80 seeker-notifications-api

      # - name: graphql
      #   uses: rabotaua/actions-graphql@main #get locally
      #   with:
      #     endpoint: http://localhost:5000/graphql
      #     service: $ServiceName
      #     token: ${{ secrets.GH_TOKEN }}
      #     key: ${{ secrets.APOLLO_KEY }}

      # - name: docker logs
      #   if: always()
      #   run: docker logs service
      # - name: docker rm
      #   if: always()
      #   run: docker rm -f service
