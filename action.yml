name: graphql
description: GitHub Action GraphQL Checks
inputs:
  service:
    description: name of the service in graphql
    required: true

  endpoint:
    description: endpoint where graphql schema can be retrieved
    required: true

  key:
    description: apollo key
    required: true

  token:
    description: github token with read privileges
    required: true

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        repository: rabotaua/mavis
        ref: main
        token: ${{ inputs.token }}
        path: .github/mavis

    - name: npm install
      shell: bash
      working-directory: .github/mavis
      run: npm install > /dev/null

    - name: mavis
      shell: bash
      working-directory: .github/mavis
      run: node cli.js ${{ inputs.endpoint }} ${{ inputs.service }}
      #env:
      #  APOLLO_KEY: ${{ inputs.key }}

    # - name: apollo
    #   shell: bash
    #   working-directory: .github/mavis
    #   run: npx apollo service:check --serviceName=${{ inputs.service }} --graph=dracula --key=${{ inputs.key }} --endpoint=${{ inputs.endpoint }}
    - name: rover install
      shell: bash
      env:
         APOLLO_KEY: ${{ inputs.key }}
      run: |
        echo "::group::rover install"
        # # somehow, instead of correct version, our version is used, which causes 404 errors
        # curl -sSL https://rover.apollo.dev/nix/latest | sh
        # # instead downloading it manually
        mkdir -p ~/.rover/bin
        wget https://github.com/apollographql/rover/releases/download/v0.22.0/rover-v0.22.0-x86_64-unknown-linux-gnu.tar.gz
        tar -xvf rover-v0.22.0-x86_64-unknown-linux-gnu.tar.gz -C ~/.rover
        mv ~/.rover/dist/rover ~/.rover/bin/
        rm -rf ~/.rover/dist
        echo "::endgroup::"
        echo "$HOME/.rover/bin" >> $GITHUB_PATH
        
    - name: rover check
      shell: bash
      env:
        APOLLO_KEY: ${{ inputs.key }}      
      run: |
        rover subgraph introspect ${{ inputs.endpoint }} | rover subgraph check 'dracula@current' --name ${{ inputs.service }} --schema -

    - name: federated enums usage check
      shell: pwsh
      env:
        APOLLO_KEY: ${{ inputs.key }}
      run: |
        $variables = @{
            id           = "dracula"
            graphVariant = "current"
          }

          $query = @"
          query ListServices(`$id: ID!, `$graphVariant: String!) {
            service(id: `$id) {
                implementingServices(graphVariant: `$graphVariant) {
                    ... on FederatedImplementingServices {
                        services {
                            name
                            url
                            activePartialSchema {
                              sdl
                            }
                        }
                    }
                }
            }
          }
        "@

        $services = Invoke-RestMethod -Method Post "https://engine-graphql.apollographql.com/api/graphql" -ContentType "application/json" -Headers @{ "X-Api-Key" = $env:APOLLO_KEY } -Body (ConvertTo-Json -Depth 100 -InputObject @{ variables = $variables; query = $query }) | Select-Object -ExpandProperty data | Select-Object -ExpandProperty service | Select-Object -ExpandProperty implementingServices | Select-Object -ExpandProperty services

        $federated_enums = @()
        foreach($service in $services) {
          foreach($enum in $service.activePartialSchema.sdl -replace '\s+', " " | Select-String -AllMatches -Pattern 'enum (\w+) ' | Select-Object -ExpandProperty Matches | Select-Object -ExpandProperty Value) {
            $federated_enums += [PSCustomObject]@{
              name = $service.name
              url = $service.url
              enum = $enum.Replace('enum ', '').Trim()
            }
          }
        }


        $ignored_enums = @("__DirectiveLocation", "__TypeKind", "ApplyPolicy")
        $concrete_subgraph_schema = Invoke-RestMethod -Method Post ${{ inputs.endpoint }} -Headers @{"Content-Type" = "application/json"} -Body (ConvertTo-Json -Depth 100 -InputObject @{ query =  "{  __schema { types { name kind } } }" } )
        $concrete_subgraph_enums = $concrete_subgraph_schema.data.__schema.types | Where-Object -FilterScript { $_.kind -eq "ENUM" -and $_.name -notin $ignored_enums } | Select-Object -ExpandProperty name


        $joined_enums = $federated_enums | Where-Object enum -in $concrete_subgraph_enums | Group-Object -Property enum | Where-Object  Count -gt 1
        if($joined_enums.Count -eq 0){
            exit 0;
        }

        Write-Host "Multiple usages of same enum(s) found between different subgraphs. Please check following link below:"
        Write-Host "https://rabota.atlassian.net/wiki/spaces/GQL/pages/1840513025/GraphQL+Rules#Enum-%D0%BD%D0%B5-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B8%D1%82-%D0%B4%D0%BB%D1%8F-%D0%BF%D0%B5%D1%80%D0%B5%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-sub-%D0%B3%D1%80%D0%B0%D1%84%D0%B0%D0%BC%D0%B8-%D1%84%D0%B5%D0%B4%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8"
        Write-Host "Enum(s) found:"
        $joined_enums | Sort-Object Name | Select-Object -ExpandProperty Group | ForEach-Object { Write-Host "Enum:'$($_.enum)' from service:'$($_.name)' subgraph url:'$($_.url)'" }
        exit 1;
